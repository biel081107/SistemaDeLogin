using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using SistemaDeLogin.Models;
using SistemaDeLogin.Services.Pecas;

[Authorize]
public class PecasController : Controller
{
    private readonly IPecasService _pecasService;

    public PecasController(IPecasService pecasService)
    {
        _pecasService = pecasService;
    }

    // ‚úÖ Lista todas as pe√ßas
    public async Task<IActionResult> Index()
    {
        var pecas = await _pecasService.GetAllPecasAsync();
        return View(pecas);
    }

    // ‚úÖ P√°gina para buscar pe√ßa pelo ID (formul√°rio)
    public IActionResult BuscarPorId()
    {
        return View();
    }

    // ‚úÖ Resultado da busca por ID (detalhes da pe√ßa)
    // ‚úÖ P√°gina para adicionar pe√ßa (formul√°rio)
    //[Authorize(Roles = "Admin")]
    public IActionResult Adicionar()
    {
        return View();
    }

    // ‚úÖ Post para adicionar pe√ßa
    [HttpPost]
    //[Authorize(Roles = "Admin")]
    public async Task<IActionResult> Adicionar(Pecas peca)
    {
        if (!ModelState.IsValid)
            return View(peca);

        try
        {
            await _pecasService.AddPecasAsync(peca);
            TempData["Sucesso"] = "Pe√ßa adicionada com sucesso!";
            return RedirectToAction("Index");
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("ERRO AO ADICIONAR! O PRE√áO DA PE√áA N√ÉO PODE SER MENOR OU IGUAL A ZERO") ||
                ex.Message.Contains("ERRO AO ADICIONAR! O NOME DA PE√áA N√ÉO PODE SER VAZIO"))
            {
                TempData["Erro"] = ex.Message;
                return RedirectToAction("Index");
            }
            throw; // se for outra exce√ß√£o conhecida
        }
    }

    // ‚úÖ Post para editar pe√ßa
    [HttpPost]
    //[Authorize(Roles = "Admin")]
    public async Task<IActionResult> Editar(Pecas peca)
    {
        if (!ModelState.IsValid)
            return RedirectToAction("Index");;

        try
        {
            await _pecasService.UpdatePecasAsync(peca);
            TempData["Sucesso"] = "Pe√ßa editada com sucesso!";
            return RedirectToAction("Index");
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("ERRO AO EDITAR! O PRE√áO DA PE√áA N√ÉO PODE SER MENOR OU IGUAL A ZERO") ||
            ex.Message.Contains("ERRO AO EDITAR! O NOME DA PE√áA N√ÉO PODE SER VAZIO"))
            {
                TempData["Erro"] = ex.Message;
                return RedirectToAction("Index");
            }
            throw; // se for outra exce√ß√£o conhecida
        }
        
    }

    // ‚úÖ Post para deletar pe√ßa
    [HttpPost]
    //[Authorize(Roles = "Admin")]
    public async Task<IActionResult> Deletar(int id)
    {
        await _pecasService.DeletePecasByIdAsync(id);
        return RedirectToAction("Index");
    }
}
/*üóÇÔ∏è Views necess√°rias pra esse Controller funcionar:
/Views/Pecas/Index.cshtml ‚ûù Lista todas as pe√ßas

/Views/Pecas/BuscarPorId.cshtml ‚ûù Formul√°rio pra digitar o ID

/Views/Pecas/Detalhes.cshtml ‚ûù Mostra os dados da pe√ßa encontrada

/Views/Pecas/Adicionar.cshtml ‚ûù Formul√°rio de cadastro

/Views/Pecas/Editar.cshtml ‚ûù Formul√°rio de edi√ß√£o (se quiser implementar)

Obs: O delete geralmente √© um bot√£o dentro do Index.*/